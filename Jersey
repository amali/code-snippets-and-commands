# RESTful Web Services in Java.

# In Development

## This will compile the project and run the project unit tests. 
mvn clean test

## execute the application in a standalone mode
mvn exec:java


http GET http://localhost:8080/myapp/myresource
curl -i http://localhost:8080/myapp/myresource
curl -v http://localhost:8080/myapp/myresource


###############################################################################################################
########  To create a Web Application that can be packaged as WAR and deployed in a Servlet container #########
###############################################################################################################
mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-webapp \
                -DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \
                -DgroupId=com.example -DartifactId=simple-service-webapp -Dpackage=com.example \
                -DarchetypeVersion=2.27

## To compile and package the application into a WAR, invoke the following maven command in your console: 
mvn clean package

# it looks like we need to put a main class to use the Grizzly container in development
create Main.java class

# add the following to the POM.xml
<dependency>
   <groupId>org.glassfish.jersey.containers</groupId>
   <artifactId>jersey-container-grizzly2-http</artifactId>
</dependency>

<plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>com.example.Main</mainClass>
                </configuration>
</plugin>
 
 



