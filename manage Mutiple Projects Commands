#!/bin/sh
# Corey uses pip 99% of the times 
# he use conda only when the package is not available in pip


# create a dir for your project
mkdir <the_project>

cd <the_project>


conda create --name <the_project_env> flask sqlalchemy numpy pandas

source activate <the_project_env>


pip list
conda update conda

# Remove all the cached old packages
conda clean --all

conda env export > environment.yaml


cat environment.yaml

# it is better to backage up this environment.yaml file with your project, 
# so any body want to work with the project can replicate it easly 
conda env create -f environment.yml
# Update the current environment based on environment file
conda env update -f environment.yml

# to list the locations of all the environment we have in the machine
conda env list

# change to the desired environment directory and execute the following:
mkdir -p etc/conda/activate.d
mkdir -p etc/conda/deactivate.d

touch etc/conda/activate.d/env_vars.sh
touch etc/conda/deactivate.d/env_vars.sh

# inside the file etc/conda/activate.d/env_vars.sh
##!/bin/sh
#export DATABASE_URI="postgresql://user:pass@db_server:5432/test_db"


# # inside the file etc/conda/deactivate.d/env_vars.sh
##!/bin/sh
#unset DATABASE_URI



# open up the ~/.bash_profile and add the following lines of code to the end of the file

# Aquired from https://github.com/CoreyMSchafer/code_snippets/blob/master/conda_auto_env.sh
# but originally Modified from:
# https://github.com/chdoig/conda-auto-env
# if you are using Pycharm you don't need this code

# Auto activate conda environments
function conda_auto_env() {
  if [ -e "environment.yaml" ]; then
    ENV_NAME=$(head -n 1 environment.yaml | cut -f2 -d ' ')
    # Check if you are already in the environment
    if [[ $CONDA_PREFIX != *$ENV_NAME* ]]; then
      # Try to activate environment
      source activate $ENV_NAME &>/dev/null
    fi
  fi
}

export PROMPT_COMMAND="conda_auto_env;$PROMPT_COMMAND"















